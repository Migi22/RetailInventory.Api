{
	"info": {
		"_postman_id": "59ae0c05-a49d-49a0-89fb-05a0cc63540e",
		"name": "Retail Inventory API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47477928",
		"_collection_link": "https://migi22-7808443.postman.co/workspace/ada63c15-84c5-40bc-8792-b1ee9ebad1a9/collection/47477928-59ae0c05-a49d-49a0-89fb-05a0cc63540e?action=share&source=collection_link&creator=47477928"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login as SystemAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Has JWT token\", function () {",
									"    var json = pm.response.json();",
									"    pm.expect(json).to.have.property(\"token\");",
									"    pm.expect(json.role).to.eql(\"SystemAdmin\");",
									"});",
									"pm.collectionVariables.set(\"sysadminToken\", pm.response.json().token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"sysadmin\",\n  \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login as Owner1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
									"const json = pm.response.json();",
									"pm.collectionVariables.set(\"ownerToken\", json.token);",
									"",
									"// decode JWT to get StoreId",
									"function parseJwt(t){",
									"  const p = t.split('.')[1];",
									"  const b = p.replace(/-/g,'+').replace(/_/g,'/');",
									"  return JSON.parse(decodeURIComponent(atob(b).split('').map(c => '%' + ('00'+c.charCodeAt(0).toString(16)).slice(-2)).join('')));",
									"}",
									"const payload = parseJwt(json.token);",
									"if (payload.StoreId) {",
									"  pm.collectionVariables.set(\"ownerStoreId\", String(payload.StoreId));",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"owner1\",\n  \"password\": \"owner123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login as Staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
									"const json = pm.response.json();",
									"pm.collectionVariables.set(\"staffToken\", json.token);",
									"",
									"// decode JWT to get StoreId",
									"function parseJwt(t){",
									"  const p = t.split('.')[1];",
									"  const b = p.replace(/-/g,'+').replace(/_/g,'/');",
									"  return JSON.parse(decodeURIComponent(atob(b).split('').map(c => '%' + ('00'+c.charCodeAt(0).toString(16)).slice(-2)).join('')));",
									"}",
									"const payload = parseJwt(json.token);",
									"if (payload.StoreId) {",
									"  pm.collectionVariables.set(\"staffStoreId\", String(payload.StoreId));",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"staff1\",\n  \"password\": \"staff123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unauthorized when invalid\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"wrongUser\",\n  \"password\": \"wrongPass\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Stores",
			"item": [
				{
					"name": "Get Store by Id",
					"item": [
						{
							"name": "Correct Store",
							"item": [
								{
									"name": "Owner",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
													"const json = pm.response.json();\r",
													"pm.expect(String(json.id)).to.eql(pm.collectionVariables.get(\"ownerStoreId\"));\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{ownerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/stores/{{ownerStoreId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"stores",
												"{{ownerStoreId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "System Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Has store name\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0]).to.have.property(\"name\");\r",
											"})\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sysadminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/stores",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"stores"
									]
								}
							},
							"response": []
						},
						{
							"name": "Owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status is 403 Forbidden\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/stores",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"stores"
									]
								}
							},
							"response": []
						},
						{
							"name": "Staff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 403 Forbidden\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{staffToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/stores",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"stores"
									]
								}
							},
							"response": []
						},
						{
							"name": "No token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 401 Unauthorized\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/stores",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"stores"
									]
								}
							},
							"response": []
						},
						{
							"name": "Owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
											"const json = pm.response.json();\r",
											"pm.expect(String(json.id)).to.eql(pm.collectionVariables.get(\"ownerStoreId\"));\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/stores/{{ownerStoreId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"stores",
										"{{ownerStoreId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get All Stores",
					"item": [
						{
							"name": "Include isDeleted",
							"item": []
						},
						{
							"name": "Admin (includeDeleted = True)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 200 OK\", () => pm.response.to.have.status(200));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sysadminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/stores?includeDeleted=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"stores"
									],
									"query": [
										{
											"key": "includeDeleted",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create Store",
					"item": [
						{
							"name": "Create Store - SysAdmin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 201 Created\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const json = pm.response.json();\r",
											"pm.expect(json).to.have.property(\"id\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sysadminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Create Test Store via Postman\",\r\n    \"address\": \"123 Postman Street\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/stores",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"stores"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Store",
					"item": [
						{
							"name": "Update Store - Owner (Correct Store)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 No Content\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{ownerStoreId}},\r\n    \"name\": \"Owner Store Updated\",\r\n    \"address\": \"Owner Address Update\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/stores/{{ownerStoreId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"stores",
										"{{ownerStoreId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Store",
					"item": [
						{
							"name": "Delete Store - Owner (Correct Store)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 403 Forbidden\", () => pm.response.to.have.status(403));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{ownerToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/stores/{{ownerStoreId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"stores",
										"{{ownerStoreId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PATCH restore store",
					"item": [
						{
							"name": "PATCH - Store (restore) -Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code 204 OK\", () => pm.request.to.have.status(204));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{sysadminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/stores/{{toPatchId}}/restore",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"stores",
										"{{toPatchId}}",
										"restore"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "System Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{sysadminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/stores",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"stores"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5082"
		},
		{
			"key": "sysadminToken",
			"value": ""
		},
		{
			"key": "ownerToken",
			"value": ""
		},
		{
			"key": "staffToken",
			"value": ""
		},
		{
			"key": "ownerStoreId",
			"value": "",
			"description": {
				"content": "",
				"type": "text/plain"
			}
		},
		{
			"key": "staffStoreId",
			"value": "",
			"description": {
				"content": "",
				"type": "text/plain"
			}
		},
		{
			"key": "wrongStoreId",
			"value": "",
			"description": {
				"content": "",
				"type": "text/plain"
			}
		},
		{
			"key": "nonExistStoreId",
			"value": "",
			"description": {
				"content": "",
				"type": "text/plain"
			}
		},
		{
			"key": "toPatchId",
			"value": ""
		}
	]
}